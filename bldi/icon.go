package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/nfnt/resize"
	"image"
	"image/png"
	"io"
	"log"
	"os"
	"os/exec"
	"strings"
)

func loadIcon(path string) image.Image {
	var data io.Reader

	file, err := os.Open(path)
	if err != nil {
		if os.IsNotExist(err) {
			raw, _ := Asset("favicon.png")
			data = bytes.NewBuffer(raw)
		} else {
			log.Fatal(err)
		}
	} else {
		data = file
	}
	defer file.Close()

	img, err := png.Decode(data)
	if err != nil {
		log.Fatal(err)
	}

	return resize.Resize(1024, 1024, img, resize.NearestNeighbor)
}

func saveIcon(img image.Image, path, name string) {
	out, err := os.Create(fmt.Sprintf("%s/icon_%s.png", path, name))
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	png.Encode(out, img)
}

func genIcons(from, to string) {
	i1024 := loadIcon(from)
	i512 := resize.Resize(512, 512, i1024, resize.Lanczos3)
	i256 := resize.Resize(256, 256, i1024, resize.Lanczos3)
	i128 := resize.Resize(128, 128, i1024, resize.Lanczos3)
	i64 := resize.Resize(64, 64, i1024, resize.Lanczos3)
	i32 := resize.Resize(32, 32, i1024, resize.Lanczos3)
	i16 := resize.Resize(16, 16, i1024, resize.Lanczos3)

	saveIcon(i1024, to, "512x512@2x")
	saveIcon(i512, to, "512x512")
	saveIcon(i512, to, "256x256@2x")
	saveIcon(i256, to, "256x256")
	saveIcon(i256, to, "128x128@2x")
	saveIcon(i128, to, "128x128")
	saveIcon(i64, to, "32x32@2x")
	saveIcon(i32, to, "32x32")
	saveIcon(i32, to, "16x16@2x")
	saveIcon(i16, to, "16x16")
}

func buildIcns() {
	if err := os.Mkdir(BUNDLE+"/Game.iconset", os.ModePerm); err != nil {
		log.Fatal(err)
	}

	genIcons("Icon.png", BUNDLE+"/Game.iconset")

	cmd := exec.Command("iconutil", "-c", "icns", "-o", RESOURCES+"/Game.icns", BUNDLE+"/Game.iconset")
	if err := cmd.Run(); err != nil {
		log.Fatal(err)
	}

	if err := os.RemoveAll(BUNDLE + "/Game.iconset"); err != nil {
		log.Fatal(err)
	}
}

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func favicon_png() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x7c, 0x53,
		0xc1, 0x6b, 0xd4, 0x4a, 0x18, 0x4f, 0xdb, 0xf7, 0xca, 0xa3, 0x50, 0x78,
		0x8f, 0x87, 0x87, 0x4a, 0x91, 0x21, 0x3d, 0xb4, 0x82, 0x9b, 0x49, 0xb2,
		0x89, 0xdb, 0x8c, 0x8d, 0x6d, 0x76, 0xb3, 0x6b, 0x17, 0x9b, 0x52, 0xb6,
		0x0b, 0xdd, 0x63, 0xb3, 0xc9, 0xec, 0x6e, 0x68, 0x93, 0x89, 0xc9, 0xac,
		0x9b, 0xad, 0x1e, 0x54, 0x8a, 0xd8, 0x5b, 0x3d, 0x89, 0xa0, 0xe8, 0x41,
		0x10, 0x54, 0x04, 0xcf, 0x1e, 0x3c, 0x0b, 0xf6, 0x0f, 0xd0, 0x93, 0x78,
		0x54, 0xd4, 0xb3, 0x37, 0x27, 0xdb, 0xdd, 0x55, 0xa4, 0xed, 0x40, 0x32,
		0xf3, 0x7d, 0xfc, 0x7e, 0xdf, 0xfc, 0xe6, 0x9b, 0xdf, 0xec, 0xad, 0xad,
		0x5e, 0x9a, 0x9c, 0x38, 0x3d, 0xc1, 0x71, 0xdc, 0x64, 0x79, 0xd9, 0xac,
		0xb0, 0xf9, 0xdf, 0xf4, 0xfb, 0x67, 0x94, 0xfd, 0xf7, 0xef, 0xb6, 0xce,
		0xb3, 0x69, 0x8a, 0x16, 0x6b, 0x74, 0x9d, 0x34, 0x68, 0xc7, 0x8e, 0x30,
		0x67, 0xb8, 0xa4, 0x8e, 0x41, 0xd9, 0xb7, 0x9b, 0xb8, 0x82, 0x6d, 0xb7,
		0x7b, 0xe5, 0x2d, 0x5e, 0xe0, 0xb8, 0xb1, 0x39, 0xaf, 0x5a, 0xa3, 0x35,
		0x6b, 0x05, 0x39, 0xc4, 0x17, 0xec, 0x14, 0x23, 0x24, 0x7e, 0xc8, 0xa5,
		0x63, 0x61, 0x31, 0x09, 0x6d, 0x67, 0x0b, 0x53, 0x50, 0xc7, 0x4d, 0x2f,
		0xd0, 0xf9, 0xef, 0xaf, 0xdf, 0xf0, 0xc0, 0x73, 0x75, 0x7e, 0x43, 0xb5,
		0x44, 0x2b, 0x2c, 0xe0, 0x96, 0xb7, 0xbc, 0x13, 0xe1, 0xf5, 0x9d, 0xd5,
		0xaa, 0xb3, 0xb3, 0xe5, 0x68, 0x2e, 0xbf, 0x78, 0x11, 0x2c, 0x24, 0x88,
		0x15, 0xf0, 0x31, 0xb5, 0x41, 0xe2, 0x6f, 0x07, 0x31, 0x4a, 0x74, 0xbe,
		0x57, 0x17, 0xb1, 0x75, 0x9a, 0x86, 0x3c, 0xe8, 0x41, 0xe8, 0x96, 0xce,
		0x1f, 0x8a, 0xaa, 0x59, 0x6b, 0xa0, 0x40, 0x22, 0x0c, 0x54, 0x41, 0xcd,
		0x38, 0xa2, 0x2c, 0x81, 0x9c, 0x26, 0x48, 0xaa, 0x9a, 0xcb, 0xc9, 0xe7,
		0x80, 0x2c, 0x4a, 0x0a, 0x14, 0x25, 0x28, 0x65, 0x33, 0x92, 0x86, 0x14,
		0x05, 0x89, 0x22, 0xe8, 0x0f, 0x9e, 0xed, 0x16, 0xb9, 0x0d, 0x54, 0x31,
		0x4b, 0xfd, 0xbd, 0x58, 0xa4, 0xf3, 0x2d, 0x4a, 0x43, 0x04, 0x61, 0xa7,
		0xd3, 0x11, 0x3a, 0x59, 0x81, 0x44, 0x4d, 0x28, 0x69, 0x9a, 0x06, 0x45,
		0x19, 0xca, 0x72, 0x86, 0x21, 0x32, 0x71, 0x37, 0xa0, 0x76, 0x92, 0x09,
		0xe2, 0x99, 0x41, 0x05, 0x13, 0xc7, 0x4e, 0xe4, 0x85, 0xd4, 0x23, 0x01,
		0x48, 0x63, 0xbb, 0x4e, 0xda, 0x54, 0xe7, 0xf9, 0xc1, 0x11, 0xfc, 0x70,
		0x58, 0x36, 0x88, 0xfb, 0x6d, 0x62, 0x0d, 0x83, 0x89, 0x1d, 0x42, 0x49,
		0x10, 0xe1, 0x6f, 0x40, 0xcb, 0x3a, 0x19, 0xea, 0xfb, 0x43, 0x74, 0x4c,
		0x2b, 0xb8, 0x71, 0x32, 0x3a, 0xae, 0x76, 0x43, 0x0c, 0x2b, 0x38, 0x26,
		0xed, 0xc8, 0x61, 0x17, 0xd7, 0x98, 0x49, 0xc9, 0x21, 0x2a, 0x44, 0xd8,
		0xa6, 0x24, 0xaa, 0x12, 0xb2, 0x3d, 0xe8, 0xe2, 0x5a, 0x8b, 0x50, 0x12,
		0xb7, 0x48, 0x08, 0x0a, 0x85, 0x5e, 0xd7, 0xc0, 0x9c, 0x65, 0x3b, 0x5e,
		0x90, 0x26, 0xcf, 0xf6, 0x58, 0x96, 0x85, 0xca, 0x41, 0x4c, 0xed, 0xc0,
		0xc1, 0x65, 0x53, 0xe7, 0x59, 0x46, 0xf0, 0x3c, 0x17, 0x95, 0x54, 0x53,
		0x29, 0x66, 0x45, 0x45, 0xd4, 0xcc, 0xbc, 0x24, 0x15, 0x95, 0xfc, 0xbc,
		0x66, 0x68, 0x39, 0x43, 0x55, 0xc4, 0x6c, 0x21, 0x3b, 0x5f, 0x94, 0x07,
		0x5c, 0x93, 0x38, 0x6d, 0x1f, 0x07, 0x74, 0xc0, 0x75, 0x7f, 0x71, 0xd5,
		0x63, 0xb9, 0xa9, 0x21, 0x0e, 0xd9, 0x38, 0xf2, 0xae, 0x62, 0xb7, 0x14,
		0x11, 0x1f, 0xf4, 0x0e, 0x8e, 0xbc, 0x23, 0xb4, 0xc8, 0x86, 0x22, 0xe6,
		0x35, 0x45, 0x13, 0xe7, 0x0d, 0xf3, 0x68, 0x2d, 0x87, 0x5c, 0xf7, 0x08,
		0x2d, 0x7d, 0xae, 0x71, 0x2c, 0x17, 0x32, 0x31, 0xf0, 0x8f, 0xeb, 0x1e,
		0xa4, 0x98, 0x87, 0xd2, 0xe5, 0xd0, 0xbc, 0x2c, 0x18, 0xda, 0x1f, 0x07,
		0xcc, 0xf3, 0x11, 0x33, 0xf7, 0x46, 0xe6, 0x79, 0x87, 0x3d, 0x8c, 0x95,
		0xb2, 0x69, 0x54, 0x93, 0x0f, 0xf5, 0xeb, 0x70, 0xea, 0x60, 0x69, 0x62,
		0xb3, 0x0e, 0xfe, 0xdb, 0x7f, 0x71, 0xf3, 0xef, 0x3b, 0xfe, 0xae, 0xf0,
		0x78, 0xef, 0x4c, 0xb7, 0x79, 0xe3, 0xf2, 0x83, 0xd1, 0xd9, 0x87, 0x7f,
		0x8d, 0xad, 0x9c, 0x6a, 0x7d, 0x72, 0x7f, 0x8c, 0x8c, 0xbe, 0x3b, 0x38,
		0x78, 0xf5, 0x6c, 0xe9, 0xff, 0xd9, 0xf7, 0xe3, 0x25, 0x54, 0x9a, 0xfe,
		0xf2, 0xf5, 0xfe, 0xd2, 0xee, 0x23, 0xeb, 0xde, 0x13, 0xe3, 0xda, 0x24,
		0x37, 0x32, 0xce, 0x5d, 0xf8, 0x3c, 0xdd, 0xfe, 0xf8, 0xf4, 0xdb, 0xed,
		0xf4, 0xc5, 0x95, 0x8b, 0xab, 0xe6, 0xcb, 0xfc, 0xe6, 0xad, 0x9f, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x7f, 0xd5, 0x5f, 0x5a, 0xde, 0x03, 0x00, 0x00,
	},
		"favicon.png",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"favicon.png": favicon_png,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
func AssetDir(name string) ([]string, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	pathList := strings.Split(cannonicalName, "/")
	node := _bintree
	for _, p := range pathList {
		node = node.Children[p]
		if node == nil {
			return nil, fmt.Errorf("Asset %s not found", name)
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"favicon.png": &_bintree_t{favicon_png, map[string]*_bintree_t{}},
}}
